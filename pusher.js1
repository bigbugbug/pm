/* Pusher.js
Server side node.js script that services real-time websocket requests
Allows websocket connections to subscribe and publish to MQTT topics
*/
 
var sys = require('sys');
var net = require('net');
var mqtt = require('mqtt');
var a5Parser = require('./A5Parser');
var ReceiveEvent_t = [
   [0x02, "Acknolowdge"],
   [0x06, "Timeout"],
   [0x08, "Denied"],
   [0x0B, "Stop"],
   [0x25, "DownloadRetry"],
   [0x33, "Settings"],
   [0x3C, "Info"],
   [0x3F, "SettingsItem"],
   [0xA0, "Eventlog"],
   [0xA3, "ZoneName"],
   [0xA5, "Status"],
   [0xA6, "ZoneType"],
   [0xA7, "Panel"],
   [0xAB, "Powerlink"],
   [0xB0, "PowerMaster"]];


var LogEvent_t = [ 
   "None", "Interior Alarm", "Perimeter Alarm", "Delay Alarm", "24h Silent Alarm", "24h Audible Alarm",
   "Tamper", "Control Panel Tamper", "Tamper Alarm", "Tamper Alarm", "Communication Loss", "Panic From Keyfob",
   "Panic From Control Panel", "Duress", "Confirm Alarm", "General Trouble", "General Trouble Restore", 
   "Interior Restore", "Perimeter Restore", "Delay Restore", "24h Silent Restore", "24h Audible Restore",
   "Tamper Restore", "Control Panel Tamper Restore", "Tamper Restore", "Tamper Restore", "Communication Restore",
   "Cancel Alarm", "General Restore", "Trouble Restore", "Not used", "Recent Close", "Fire", "Fire Restore", 
   "No Active", "Emergency", "No used", "Disarm Latchkey", "Panic Restore", "Supervision (Inactive)",
   "Supervision Restore (Active)", "Low Battery", "Low Battery Restore", "AC Fail", "AC Restore",
   "Control Panel Low Battery", "Control Panel Low Battery Restore", "RF Jamming", "RF Jamming Restore",
   "Communications Failure", "Communications Restore", "Telephone Line Failure", "Telephone Line Restore",
   "Auto Test", "Fuse Failure", "Fuse Restore", "Keyfob Low Battery", "Keyfob Low Battery Restore", "Engineer Reset",
   "Battery Disconnect", "1-Way Keypad Low Battery", "1-Way Keypad Low Battery Restore", "1-Way Keypad Inactive",
   "1-Way Keypad Restore Active", "Low Battery", "Clean Me", "Fire Trouble", "Low Battery", "Battery Restore",
   "AC Fail", "AC Restore", "Supervision (Inactive)", "Supervision Restore (Active)", "Gas Alert", "Gas Alert Restore",
   "Gas Trouble", "Gas Trouble Restore", "Flood Alert", "Flood Alert Restore", "X-10 Trouble", "X-10 Trouble Restore",
   "Arm Home", "Arm Away", "Quick Arm Home", "Quick Arm Away", "Disarm", "Fail To Auto-Arm", "Enter To Test Mode",
   "Exit From Test Mode", "Force Arm", "Auto Arm", "Instant Arm", "Bypass", "Fail To Arm", "Door Open",
   "Communication Established By Control Panel", "System Reset", "Installer Programming", "Wrong Password",
   "Not Sys Event", "Not Sys Event", "Extreme Hot Alert", "Extreme Hot Alert Restore", "Freeze Alert", 
   "Freeze Alert Restore", "Human Cold Alert", "Human Cold Alert Restore", "Human Hot Alert",
   "Human Hot Alert Restore", "Temperature Sensor Trouble", "Temperature Sensor Trouble Restore",
   "PIR Mask", "PIR Mask Restore", "", "", "", "", "", "", "", "", "", "",
   "Alarmed", "Restore", "Alarmed", "Restore", "", "", "", "", "", "", "", "", "", "",
   "", "", "", "", "", "Exit Installer", "Enter Installer", "", "", "", "", ""];
   

   
var pmPanelAlarmType_t = [
   [0x01,"Intruder"], [0x02, "Intruder"] 
   , [0x03, "Intruder"], [0x04, "Intruder"], [0x05, "Intruder"], [0x06, "Tamper"], 
   [0x07,"Tamper"], [0x08, "Tamper"], [0x09, "Tamper"], [0x0B, "Panic"], [0x0C, "Panic"], [0x20, "Fire"], 
   [0x23, "Emergency"], [0x49, "Gas"], [0x4D, "Flood"]];


var pmPanelTroubleType_t = [
   [0x0A, "Communication"], [0x0F, "General"], [0x29, "Battery"], [0x2B, "Power"], [0x2D, "Battery"], [0x2F, "Jamming"], 
   [0x31, "Communication"], [0x33, "Telephone"], [0x36, "Power"], [0x38, "Battery"], [0x3B, "Battery"], [0x3C, "Battery"],
   [0x40, "Battery"], [0x43, "Battery"]];


var pmPanelType_t = [
   [1, "PowerMax"], [2, "PowerMax+"], [3, "PowerMax Pro"], [4, "PowerMax Complete"], [5, "PowerMax Pro Part"],
   [6, "PowerMax Complete Part"], [7, "PowerMax Express"], [8, "PowerMaster10"], [9, "PowerMaster30"]];
   
// create a socket object that listens on port 5000
var io = require('socket.io').listen(5000);
 
// create an mqtt client object and connect to the mqtt broker
var client = mqtt.connect('mqtt://192.168.1.50');
 
 function toHex(str) {
	var hex = '\r\n';
	for(var i=0;i<str.length;i++) {
	hex += '0x'+str.charCodeAtAt(i).toString(16)+' ';
	}
	console.log('2nd char is ='+str.charCodeAt(1));
	return hex;
}

io.sockets.on('connection', function (socket) {
    // socket connection indicates what mqtt topic to subscribe to in data.topic
    socket.on('subscribe', function (data) {
        console.log('Subscribing to '+data.topic);
        socket.join(data.topic);
        client.subscribe(data.topic);
    });
    // when socket connection publishes a message, forward that message
    // the the mqtt broker
    socket.on('publish', function (data) {
        console.log('Publishing to '+data.topic);
        client.publish(data.topic,data.payload);
    });
});
 
// listen to messages coming from the mqtt broker
client.on('message', function (topic, payload, packet) {
    console.log(topic+'='+payload);
//   if (payload.toString().substring(0,4) == "LOG:")
//		console.log(topic+'='+payload);
//	else
//	{
//		console.log('test='+String(payload));
//		console.log(topic+'='+toHex(String(payload)));
//	}
	var alarmCode = "";
	if (payload.toString().substring(0,1) == "d" && topic == "powerMaxOut")
		alarmCode = payload.toString().substring(2,2);
	console.log('alarmcode='+alarmCode);
	if (alarmCode == "a5")
		a5Parser.parseA5Status(String(payload));
    io.sockets.emit('mqtt',{'topic':String(topic),
                            'payload':String(payload)});
});
